package one.show.live.common.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import one.show.live.common.po.POLogin;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POLOGIN".
*/
public class POLoginDao extends AbstractDao<POLogin, Long> {

    public static final String TABLENAME = "POLOGIN";

    /**
     * Properties of entity POLogin.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property IsVip = new Property(2, int.class, "isVip", false, "IS_VIP");
        public final static Property IsNew = new Property(3, int.class, "isNew", false, "IS_NEW");
        public final static Property VideoVerifyStatus = new Property(4, int.class, "videoVerifyStatus", false, "VIDEO_VERIFY_STATUS");
        public final static Property VipEndTime = new Property(5, String.class, "vipEndTime", false, "VIP_END_TIME");
        public final static Property ProfileImg = new Property(6, String.class, "profileImg", false, "PROFILE_IMG");
        public final static Property Thumbnail = new Property(7, String.class, "thumbnail", false, "THUMBNAIL");
        public final static Property PopularNo = new Property(8, String.class, "popularNo", false, "POPULAR_NO");
        public final static Property PhoneNumber = new Property(9, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property NickName = new Property(10, String.class, "nickName", false, "NICK_NAME");
        public final static Property Diamond = new Property(11, int.class, "diamond", false, "DIAMOND");
        public final static Property Background = new Property(12, String.class, "background", false, "BACKGROUND");
        public final static Property Gender = new Property(13, int.class, "gender", false, "GENDER");
        public final static Property CarVerifyStatus = new Property(14, int.class, "carVerifyStatus", false, "CAR_VERIFY_STATUS");
        public final static Property Gold = new Property(15, int.class, "gold", false, "GOLD");
        public final static Property Ry_token = new Property(16, String.class, "ry_token", false, "RY_TOKEN");
        public final static Property Beke_token = new Property(17, String.class, "beke_token", false, "BEKE_TOKEN");
        public final static Property Remark = new Property(18, String.class, "remark", false, "REMARK");
        public final static Property Description = new Property(19, String.class, "description", false, "DESCRIPTION");
        public final static Property SinaVerifyInfo = new Property(20, String.class, "sinaVerifyInfo", false, "SINA_VERIFY_INFO");
    }


    public POLoginDao(DaoConfig config) {
        super(config);
    }
    
    public POLoginDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POLOGIN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UID\" TEXT UNIQUE ," + // 1: uid
                "\"IS_VIP\" INTEGER NOT NULL ," + // 2: isVip
                "\"IS_NEW\" INTEGER NOT NULL ," + // 3: isNew
                "\"VIDEO_VERIFY_STATUS\" INTEGER NOT NULL ," + // 4: videoVerifyStatus
                "\"VIP_END_TIME\" TEXT," + // 5: vipEndTime
                "\"PROFILE_IMG\" TEXT," + // 6: profileImg
                "\"THUMBNAIL\" TEXT," + // 7: thumbnail
                "\"POPULAR_NO\" TEXT," + // 8: popularNo
                "\"PHONE_NUMBER\" TEXT," + // 9: phoneNumber
                "\"NICK_NAME\" TEXT," + // 10: nickName
                "\"DIAMOND\" INTEGER NOT NULL ," + // 11: diamond
                "\"BACKGROUND\" TEXT," + // 12: background
                "\"GENDER\" INTEGER NOT NULL ," + // 13: gender
                "\"CAR_VERIFY_STATUS\" INTEGER NOT NULL ," + // 14: carVerifyStatus
                "\"GOLD\" INTEGER NOT NULL ," + // 15: gold
                "\"RY_TOKEN\" TEXT," + // 16: ry_token
                "\"BEKE_TOKEN\" TEXT," + // 17: beke_token
                "\"REMARK\" TEXT," + // 18: remark
                "\"DESCRIPTION\" TEXT," + // 19: description
                "\"SINA_VERIFY_INFO\" TEXT);"); // 20: sinaVerifyInfo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POLOGIN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, POLogin entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(2, uid);
        }
        stmt.bindLong(3, entity.getIsVip());
        stmt.bindLong(4, entity.getIsNew());
        stmt.bindLong(5, entity.getVideoVerifyStatus());
 
        String vipEndTime = entity.getVipEndTime();
        if (vipEndTime != null) {
            stmt.bindString(6, vipEndTime);
        }
 
        String profileImg = entity.getProfileImg();
        if (profileImg != null) {
            stmt.bindString(7, profileImg);
        }
 
        String thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindString(8, thumbnail);
        }
 
        String popularNo = entity.getPopularNo();
        if (popularNo != null) {
            stmt.bindString(9, popularNo);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(10, phoneNumber);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(11, nickName);
        }
        stmt.bindLong(12, entity.getDiamond());
 
        String background = entity.getBackground();
        if (background != null) {
            stmt.bindString(13, background);
        }
        stmt.bindLong(14, entity.getGender());
        stmt.bindLong(15, entity.getCarVerifyStatus());
        stmt.bindLong(16, entity.getGold());
 
        String ry_token = entity.getRy_token();
        if (ry_token != null) {
            stmt.bindString(17, ry_token);
        }
 
        String beke_token = entity.getBeke_token();
        if (beke_token != null) {
            stmt.bindString(18, beke_token);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(19, remark);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(20, description);
        }
 
        String sinaVerifyInfo = entity.getSinaVerifyInfo();
        if (sinaVerifyInfo != null) {
            stmt.bindString(21, sinaVerifyInfo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, POLogin entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(2, uid);
        }
        stmt.bindLong(3, entity.getIsVip());
        stmt.bindLong(4, entity.getIsNew());
        stmt.bindLong(5, entity.getVideoVerifyStatus());
 
        String vipEndTime = entity.getVipEndTime();
        if (vipEndTime != null) {
            stmt.bindString(6, vipEndTime);
        }
 
        String profileImg = entity.getProfileImg();
        if (profileImg != null) {
            stmt.bindString(7, profileImg);
        }
 
        String thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindString(8, thumbnail);
        }
 
        String popularNo = entity.getPopularNo();
        if (popularNo != null) {
            stmt.bindString(9, popularNo);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(10, phoneNumber);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(11, nickName);
        }
        stmt.bindLong(12, entity.getDiamond());
 
        String background = entity.getBackground();
        if (background != null) {
            stmt.bindString(13, background);
        }
        stmt.bindLong(14, entity.getGender());
        stmt.bindLong(15, entity.getCarVerifyStatus());
        stmt.bindLong(16, entity.getGold());
 
        String ry_token = entity.getRy_token();
        if (ry_token != null) {
            stmt.bindString(17, ry_token);
        }
 
        String beke_token = entity.getBeke_token();
        if (beke_token != null) {
            stmt.bindString(18, beke_token);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(19, remark);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(20, description);
        }
 
        String sinaVerifyInfo = entity.getSinaVerifyInfo();
        if (sinaVerifyInfo != null) {
            stmt.bindString(21, sinaVerifyInfo);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public POLogin readEntity(Cursor cursor, int offset) {
        POLogin entity = new POLogin( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uid
            cursor.getInt(offset + 2), // isVip
            cursor.getInt(offset + 3), // isNew
            cursor.getInt(offset + 4), // videoVerifyStatus
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // vipEndTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // profileImg
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // thumbnail
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // popularNo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // phoneNumber
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // nickName
            cursor.getInt(offset + 11), // diamond
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // background
            cursor.getInt(offset + 13), // gender
            cursor.getInt(offset + 14), // carVerifyStatus
            cursor.getInt(offset + 15), // gold
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // ry_token
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // beke_token
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // remark
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // description
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // sinaVerifyInfo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, POLogin entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsVip(cursor.getInt(offset + 2));
        entity.setIsNew(cursor.getInt(offset + 3));
        entity.setVideoVerifyStatus(cursor.getInt(offset + 4));
        entity.setVipEndTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProfileImg(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setThumbnail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPopularNo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhoneNumber(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setNickName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDiamond(cursor.getInt(offset + 11));
        entity.setBackground(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGender(cursor.getInt(offset + 13));
        entity.setCarVerifyStatus(cursor.getInt(offset + 14));
        entity.setGold(cursor.getInt(offset + 15));
        entity.setRy_token(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setBeke_token(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setRemark(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setDescription(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSinaVerifyInfo(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(POLogin entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(POLogin entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(POLogin entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
